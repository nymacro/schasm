(library-directories ".")
(import (schasm)
	(chezscheme))

(define out (make-asm))

(define (print-hex-pretty instrs port)
  (parameterize ((current-output-port port))
    (let ([n 0])
      (for-each (lambda (x)
                  (set! n (fx1+ n))
                  (when (<= x 15)
                    (display "0"))
                  (display (format "~x" x))
                  (when (= 0 (fxmod n 8))
                    (display ":"))
                  (when (= 0 (fxmod n 16))
                    (newline)))
                (bytevector->u8-list instrs)))))

(define (print-hex instrs port)
  (parameterize ((current-output-port port))
    (let ([n 0])
      (for-each (lambda (x)
                  (set! n (fx1+ n))
                  (when (<= x 15)
                    (display "0"))
                  (display (format "~x" x)))
                (bytevector->u8-list instrs)))))

;; diassemble using
(define (disasm instrs port)
  (parameterize ((current-output-port port))
    (display "Disassembling\n")
    (print-hex-pretty instrs port)
    (newline)
    (let ([transcoder (make-transcoder (utf-8-codec) (eol-style lf)
                                       (error-handling-mode replace))])
      (let-values ([(stdin stdout stderr pid) (open-process-ports "llvm-mc -disassemble" 'block transcoder)])
        (for-each (lambda (x) (display (format "~a " x) stdin))
                  (bytevector->u8-list instrs))
        (close-output-port stdin)

        (let loop ()
          (let ((d (get-line stdout)))
            (unless (eof-object? d)
              (display d)
              (newline)
              (loop))))))))

;; (test-schasm)

(asm out
     (label 'hello)
     (mov %rax 20)
     ;; (mov %rbx 20)
     (jmp 'hello)
     (ret))

(let ([bin (asm-value out)])
  (disasm bin (current-error-port))
  ;; (for-each (lambda (x)
  ;;             (write-char (integer->char x)))
  ;;           (bytevector->u8-list bin))
  (print-hex bin (current-output-port))
  )
(exit)
